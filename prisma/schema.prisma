generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tasks         Task[]
  goals         Goal[]
  habits        Habit[]
  routines      Routine[]
  journals      Journal[]
  aiLogs        AILog[]
  
  // NextAuth fields
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String?
  completed   Boolean   @default(false)
  dueDate     DateTime?
  priority    String?   @default("medium")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aiSuggested Boolean   @default(false)
  aiApproved  Boolean?
  routines    Routine[]
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  targetDate  DateTime?
  progress    Int       @default(0)
  completed   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aiSuggested Boolean   @default(false)
  aiApproved  Boolean?
}

model Habit {
  id          String    @id @default(cuid())
  title       String
  description String?
  frequency   String    // daily, weekly, etc.
  streak      Int       @default(0)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aiSuggested Boolean   @default(false)
  aiApproved  Boolean?
  routines    Routine[]
}

model Routine {
  id          String    @id @default(cuid())
  title       String
  description String?
  timeOfDay   String    // morning, afternoon, evening
  active      Boolean   @default(true)
  steps       Json      // Array of steps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aiSuggested Boolean   @default(false)
  aiApproved  Boolean?
  habits      Habit[]
  tasks       Task[]
}

model Journal {
  id          String    @id @default(cuid())
  title       String
  content     String
  mood        String?
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  aiAnalysis  String?
}

model AILog {
  id          String    @id @default(cuid())
  action      String    // create, update, delete, suggest
  entityType  String    // task, goal, habit, routine, journal
  entityId    String?
  details     Json
  approved    Boolean?
  createdAt   DateTime  @default(now())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}